# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

var_a = float(input("Введите делимое."))
var_b = float(input("Введите делитель."))


def division(a, b):
    """Функция принимает два числа и находит их частное.
    При попытке деления на ноль выводит соответствующее сообщение"""
    if b != 0:
        result = a / b
        print("Результат деления: ", result)
    else:
        print("На ноль делить нельзя!")


division(var_a, var_b)


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы. Осуществить вывод данных о пользователе одной строкой.

user_name = input("Введите имя пользователя: ")
user_surname = input("Введите фамилию пользователя: ")
user_year_of_birth = input("Введите год рождения пользователя: ")
user_city = input("Введите город проживания пользователя: ")
user_email = input("Введите email пользователя: ")
user_phone_number = input("Введите телефон пользователя: ")


def user_credentials(name, surname, year_of_birth, city, email, phone_number):
    """Функция принимает параметры с личными данными пользователя, введенные пользователем,
    после чего выводит их одной строкой"""

    print(f"Имя - {name}, Фамилия - {surname}, Год рождения - {year_of_birth}, Город проживания - {city},"
          f"Электронная почта - {email}, Телефонный номер - {phone_number}")


user_credentials(user_name, user_surname, user_year_of_birth, user_city, user_email, user_phone_number)

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента
# и возвращает сумму наибольших двух аргументов.

var_1 = float(input("Введите первое число: "))
var_2 = float(input("Введите второе число: "))
var_3 = float(input("Введите третье число: "))
print("Программа вернет сумму наибольших двух чисел.")


def my_func(arg_1, arg_2, arg_3):
    """Принимает три числа, возвращает сумму двух наибольших.
    Для этого происходит запись трех чисел в слисок, после этого производится сортировка,
    далее последние два числа суммируются (так как в списке три элемента,
    обращение производится по фиксированному индексу)"""

    arr = [arg_1, arg_2, arg_3]
    arr.sort()
    result = arr[1] + arr[2]
    return result


print("Сумма двух наибольших чисел: ", my_func(var_1, var_2, var_3))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
# При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

float_x = float(input("Введите действительное положительное число Х:"))
int_y = int(input("Введите целое отрицательное число Y. Программа возведет число Х в степень Y."))


def my_func_exponentiation(x, y):
    """Функция принимает число X и возводит его в степень Y двумя способами.
    Первый - с использованием оператора **
    Второй - с помощью цикла while"""

    first_result = x**y
    print("Результат, полученный с помощью оператора ** ", first_result)

    second_result = 1
    while y != 0:
        second_result = second_result * (1 / x)
        y += 1
    print("Результат, полученный с помощью цикла ", second_result)
    # Результат получается почти правильный, но с небольшим "хвостом".


my_func_exponentiation(float_x, int_y)

# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter.
# Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел,
# то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

print("Введите числа, разделенные пробелом. При нажатии на Enter будет выводиться сумма чисел.")
print("После этого можно продолжить ввод чисел, они будут добавляться к уже подсчитанной сумме.")
print("Программа завершит выполнение, если Вы введете что-то отличное от числа")

sum_of_numbers = 0
try:
    while True:
        for n in map(float, input().split()):
            sum_of_numbers += n
        print("Сумма чисел: ", sum_of_numbers)
except ValueError:
    print("Введено нечисловое значение. Сумма чисел: ", sum_of_numbers)
    print("Программа прекращает работу.")

# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
print("Введите слово из маленьких букв.")
print("Программа вернет это слово с прописной первой буквой.")
text_str = input("Слово: ")


def int_func_1(user_text):
    """Функция принимает слово и возвращает то же слово, то начинающееся с большой буквы"""

    return user_text[0].upper() + user_text[1:]


print("Результат: ", int_func_1(text_str))

# 7.Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре.
# Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Используйте написанную ранее функцию int_func().

print("Введите слова из маленьких букв, разделенные пробелами.")
print("Программа вернет строку, в которой каждое слово будет начинаться с заглавной буквы")
user_string = input("Строка: ")


def int_func_2(my_str):
    """Функция принимает строку из слов, разделенных пробелами.
    Возвращает строку, в которой слова начинаются с больших букв."""

    return " ".join([word[0].upper() + word[1:] for word in my_str.split()])


print("Результат: ", int_func_2(user_string))
